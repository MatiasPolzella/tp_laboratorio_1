
#include <stdio.h>
#include <stdlib.h>
#include "validaciones.h"


/// @fn isNumericFloat
/// @brief Recibe una cadena, recorre todos los caracteres de la cadena, y si alguno no es numerico, el bucle termina y la varable retorno quedara cargada en -1
/// y devuelve 1 en el caso de que el texto este compuesto solo por numeros
/// @param cadena
/// @return Devuelve 1 en el caso que los caracteres sean todos numericos
static int isNumericFloat(char* cadena);

/// @fn getFloat
/// @brief Pide un texto al usuario, lo almacena como cadena, valida y convierte el texto a numero y lo devuelve como int
/// @param pResultado
/// @return
static float getFloat(int* pResultado);


int getInteger(int* pResultado, char* mensaje, char* mensajeError,int minimo, int maximo, int reintentos)
{
	int retorno = -1; //lo cargo con el error
		int bufferInt;

		if(pResultado != NULL && mensaje != NULL && mensajeError != NULL && minimo <= maximo && reintentos >= 0)
		{
			do //el do me asegura que la primera vez se va a cumplir
			{
				printf("%s",mensaje);
				scanf("%d",&bufferInt);
				if(bufferInt >= minimo && bufferInt <= maximo) //si se da esta condicion, esta todo ok. sino, imprimira el mensaje de error y decrementará reintentos
				{
					*pResultado = bufferInt;
					retorno = 0; //para indicar el exito
					break; //si esta todo ok, hago un break y eso hace que deje de reintentar
				}
				else
				{
					printf("%s",mensajeError);
					reintentos--;
				}
			}while(reintentos >= 0);
		}

		return retorno; //me aseguro que devuelva el error, excepto que yo haga algo distinto
}


/*int getFloat(float* pResultado, char* mensaje, char* mensajeError,float minimo, float maximo, int reintentos)
{
		float retorno = -1;
		float bufferFloat;

		if(pResultado != NULL && mensaje != NULL && mensajeError != NULL && minimo <= maximo && reintentos >= 0)
		{
			do
			{
				printf("%s",mensaje);
				scanf("%f",&bufferFloat);
				if(bufferFloat >= minimo && bufferFloat <= maximo)
				{
					*pResultado = bufferFloat;
					retorno = 0;
					break;
				}
				else
				{
					printf("%s",mensajeError);
					reintentos--;
				}
			}while(reintentos >= 0);
		}

		return retorno;
	}
*/

int getNumberFloat(float* pResultado,char* mensaje, char* mensajeError, float minimo, float maximo, int reintentos)
{
     int retorno;
     float numero;

     while(reintentos>0)
     {
        printf(mensaje);
        if(getFloat(&numero)==1)
        {
            if(numero<=maximo && numero>=minimo)
            break;
        }
        reintentos--;
        printf(mensajeError);
     }
         if(reintentos==0)
         {
             retorno=-1;
         }
        else
        {
             retorno=0;
            *pResultado = numero;
        }
     return retorno;
}


static int isNumericFloat(char* cadena)
{
	int retorno=-1;
	int i=0;

	if(cadena!=NULL)
	{
		while(cadena[i]!='\0')
		{
			if(cadena[i]<'0' || cadena[i]>'9')
				break;
			i++;
		}
		if(cadena[i]=='\0')
			retorno=1;
	}
	return retorno;
}
 //FUNCIONA- INCLUILO EN EL TP!
static float getFloat(float* pResultado)
{
	int retorno=-1;
	char buffer[64];

	scanf("%s",buffer);
	if(isNumericFloat(buffer))
	{
		*pResultado = atoi(buffer);
		retorno=1;
	}
	return retorno;
}
